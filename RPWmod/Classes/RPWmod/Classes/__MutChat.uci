
//////////////////////////tarder dash
	
	//SetCustomSprintSpeed用
		Enum eSprintSpeedType {
			DefaultSprintSpeed,
			TraderSprintSpeed
		};
		struct CustomSprintSpeed{
			var KFPlayerController KFPC;
			var float SprintSpeed;
		};
		var array<CustomSprintSpeed> CSS;
//			bTraderDash = false;

		var config bool bTraderDash;

	//SetCustomSprintSpeed用
		const TraderSprintSpeed = 364364.0f;
	//スプリント速度の変更
	function SetCustomSprintSpeed(eSprintSpeedType SSType) {
		local KFPlayerController KFPC;
		local CustomSprintSpeed CSSbuf;
		switch(SSType) {
			case TraderSprintSpeed:
				//スピードを変更し、変更者リストに追加
				foreach WorldInfo.AllControllers(class'KFPlayerController', KFPC) {
					CSSbuf.KFPC = KFPC;
					CSSbuf.SprintSpeed = KFPawn(KFPC.Pawn).SprintSpeed;
					CSS.AddItem(CSSbuf);
					KFPawn(KFPC.Pawn).SprintSpeed = TraderSprintSpeed;
					SendRestrictMessageStringPC(KFPC,"::NewSpeed="$KFPawn(KFPC.Pawn).SprintSpeed);
				}
			break;
			case DefaultSprintSpeed:
				//変更者リストの人物の速度を元に戻す いなくなっている場合を考慮する
				foreach CSS(CSSbuf) {
					if (CSSbuf.KFPC==None) continue;
					KFPawn(CSSbuf.KFPC.Pawn).SprintSpeed = CSSbuf.SprintSpeed;
					SendRestrictMessageStringPC(KFPC,"::NewSpeed="$KFPawn(CSSbuf.KFPC.Pawn).SprintSpeed);
				}
				CSS.Remove(0,CSS.length);
			break;
		}
	}



//////////////////chat




			SetTimer(0.5, true, nameof(ExecuteChatMessages));
	//ExecuteChatMessages用
		var string OldLabel;
	
	//チャットメッセージを取得 !rpwXXXの実行
	function ExecuteChatMessages() {
		local array<GFxObject> DObj;
		local KFPlayerController KFPC;
		local string NewLabel;
		foreach WorldInfo.AllControllers(class'KFPlayerController', KFPC) {
			if ( MyKFGI.AccessControl.IsAdmin(KFPC) || KFPC.IsLocalController() ) {
				DObj = KFPC.MyGFxHUD.HudChatBox.GetDataObjects();
				NewLabel = DObj[0].GetString("label");
				if (OldLabel!=NewLabel)
				SetRestrictMessagePC(KFPC);
				SetRestrictMessageString(
				);
				SendRestrictMessageString();
				if () {
					ExecuteRPWMessage()
				}
			}
		}
	}